/*

   Derby - Class org.apache.derby.impl.sql.execute.DMLWriteGeneratedColumnsResultSet

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to you under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */

package org.apache.derby.impl.sql.execute;

import java.util.HashMap;


import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.ResultColumnDescriptor;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.types.DataValueDescriptor;
import org.apache.derby.iapi.types.NumberDataValue;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.shared.common.sanity.SanityManager;

/*
 * This class includes code for auto generated columns that can be shared
 *  by insert and update statements in the execution phase.
 */
abstract public class DMLWriteGeneratedColumnsResultSet extends DMLWriteResultSet
{    
	/**
	 * keeps track of autoincrement values that are generated by 
	 * getSetAutoincrementValues.
	 */
	protected DataValueDescriptor				aiCache[];
	
	protected String              identitySequenceUUIDString;

	protected	NoPutResultSet			sourceResultSet;

	/**
	 * Constructor
	 *
 	 * @param activation		an activation
	 *
 	 * @exception StandardException on error
	 */
	DMLWriteGeneratedColumnsResultSet(Activation activation)
		throws StandardException
	{
		this(activation, activation.getConstantAction());
	}

	DMLWriteGeneratedColumnsResultSet(Activation activation, ConstantAction constantAction)
		throws StandardException
	{
		super(activation, constantAction);
	}
	
    /**
     * getSetAutoincrementValue will get the autoincrement value of the 
     * columnPosition specified for the target table. If increment is 
     * non-zero we will also update the autoincrement value. 
     *
     * @param columnPosition	position of the column in the table (1-based)
     * @param increment			amount of increment. 
     *
     * @exception StandardException if anything goes wrong.
     */
    public NumberDataValue
    	getSetAutoincrementValue(int columnPosition, long increment)
    	throws StandardException {
        if (SanityManager.DEBUG) {
            // This method should be overriden by InsertResultSet and
            // UpdateResultSet, other shouldn't need it.
            SanityManager.NOTREACHED();
        }
		return null; 
    }
    
    public void saveAIcacheInformation(String schemaName,
    		String tableName, String[] columnNames) 
    throws StandardException{
        if (aiCache != null)
        {
            HashMap<String,Long> aiHashtable = new HashMap<String,Long>();
            int numColumns = aiCache.length;
            // this insert updated ai values, store them in some persistent
            // place so that I can see these values.
            for (int i = 0; i < numColumns; i++)
            {
                if (aiCache[i] == null)
                    continue;
                aiHashtable.put(AutoincrementCounter.makeIdentity(
                        schemaName,
                        tableName,
                        columnNames[i]),
                        new Long(aiCache[i].getLong()));
            }
            InternalTriggerExecutionContext itec =
                (InternalTriggerExecutionContext)lcc.getTriggerExecutionContext();
            if (itec == null)
                lcc.copyHashtableToAIHT(aiHashtable);
            else
                itec.copyHashtableToAIHT(aiHashtable);
        }	
    }
}